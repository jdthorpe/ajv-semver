// adapted from npm/node-semver/test/index.js
"use strict";

var tap = require("tap");
var test = tap.test;
//-- var semver = require('semver');
//-- var eq = semver.eq;
//-- var gt = semver.gt;
//-- var lt = semver.lt;
//-- var neq = semver.neq;
//-- var cmp = semver.cmp;
//-- var gte = semver.gte;
//-- var lte = semver.lte;
//-- var satisfies = semver.satisfies;
//-- var validRange = semver.validRange;

var Ajv = require("ajv");
var ajv = new Ajv();
require("../index.js")(ajv);

test("\ncomparison tests", function (t) {
  // [version1, version2]
  // version1 should be greater than version2
  [
    ["0.0.0", "0.0.0-foo"],
    ["0.0.1", "0.0.0"],
    ["1.0.0", "0.9.9"],
    ["0.10.0", "0.9.0"],
    ["0.99.0", "0.10.0"],
    ["2.0.0", "1.2.3"],
    ["v0.0.0", "0.0.0-foo", true],
    ["v0.0.1", "0.0.0", true],
    ["v1.0.0", "0.9.9", true],
    ["v0.10.0", "0.9.0", true],
    ["v0.99.0", "0.10.0", true],
    ["v2.0.0", "1.2.3", true],
    ["0.0.0", "v0.0.0-foo", true],
    ["0.0.1", "v0.0.0", true],
    ["1.0.0", "v0.9.9", true],
    ["0.10.0", "v0.9.0", true],
    ["0.99.0", "v0.10.0", true],
    ["2.0.0", "v1.2.3", true],
    ["1.2.3", "1.2.3-asdf"],
    ["1.2.3", "1.2.3-4"],
    ["1.2.3", "1.2.3-4-foo"],
    ["1.2.3-5-foo", "1.2.3-5"],
    ["1.2.3-5", "1.2.3-4"],
    ["1.2.3-5-foo", "1.2.3-5-Foo"],
    ["3.0.0", "2.7.2+asdf"],
    ["1.2.3-a.10", "1.2.3-a.5"],
    ["1.2.3-a.b", "1.2.3-a.5"],
    ["1.2.3-a.b", "1.2.3-a"],
    ["1.2.3-a.b.c.10.d.5", "1.2.3-a.b.c.5.d.100"],
    ["1.2.3-r2", "1.2.3-r100"],
    ["1.2.3-r100", "1.2.3-R2"],
  ].forEach(function (v) {
    // v = ['v0.10.0', '0.9.0', true]
    var v0 = v[0];
    var v1 = v[1];
    var loose = v[2];

    t.ok(
      ajv.validate({ semver: { gt: v1, loose: loose } }, v0),
      "gt('" + v0 + "', '" + v1 + "')"
    );
    t.ok(
      ajv.validate({ semver: { lt: v0, loose: loose } }, v1),
      "lt('" + v1 + "', '" + v0 + "')"
    );
    t.ok(
      !ajv.validate({ semver: { gt: v0, loose: loose } }, v1),
      "!gt('" + v1 + "', '" + v0 + "')"
    );
    t.ok(
      !ajv.validate({ semver: { lt: v1, loose: loose } }, v0),
      "!lt('" + v0 + "', '" + v1 + "')"
    );
    t.ok(
      ajv.validate({ semver: { eq: v0, loose: loose } }, v0),
      "eq('" + v0 + "', '" + v0 + "')"
    );
    t.ok(
      ajv.validate({ semver: { eq: v1, loose: loose } }, v1),
      "eq('" + v1 + "', '" + v1 + "')"
    );
    t.ok(
      ajv.validate({ semver: { neq: v1, loose: loose } }, v0),
      "neq('" + v0 + "', '" + v1 + "')"
    );
  });
  t.end();
});

test("\nMajor,minor,patch tests", function (t) {
  // [version1, version2]
  // version1 should be greater than version2
  [
    // ["0.0.0", 0, 0, 0],
    // ["0.0.1", 0, 0, 1],
    ["1.0.0", 1, 0, 0],
    // ["0.10.0", 0, 10, 0],
    // ["0.99.0", 0, 99, 0],
    // ["2.0.0", 2, 0, 0],
    // ["v0.0.0", 0, 0, 0, true],
    // ["v0.0.1", 0, 0, 1, true],
    // ["v1.0.0", 1, 0, 0, true],
    // ["v0.10.0", 0, 10, 0, true],
    // ["v0.99.0", 0, 99, 0, true],
    // ["v2.0.0", 2, 0, 0, true],
    // ["0.0.0", 0, 0, 0, true],
    // ["0.0.1", 0, 0, 1, true],
    // ["1.0.0", 1, 0, 0, true],
    // ["0.10.0", 0, 10, 0, true],
    // ["0.99.0", 0, 99, 0, true],
    // ["2.0.0", 2, 0, 0, true],
    // ["1.2.3", 1, 2, 3],
    // ["1.2.3", 1, 2, 3],
    // ["1.2.3", 1, 2, 3],
    // ["1.2.3-5-foo", 1, 2, 3],
    // ["1.2.3-5", 1, 2, 3],
    // ["1.2.3-5-foo", 1, 2, 3],
    // ["3.0.0", 3, 0, 0],
    // ["1.2.3-a.10", 1, 2, 3],
    // ["1.2.3-a.b", 1, 2, 3],
    // ["1.2.3-a.b", 1, 2, 3],
    // ["1.2.3-a.b.c.10.d.5", 1, 2, 3],
    // ["1.2.3-r2", 1, 2, 3],
    // ["1.2.3-r100", 1, 2, 3],
  ].forEach(function (v) {
    var v0 = v[0];
    var loose = v[4] || false;

    var base = {
        type: "object",
        properties: {
          v: {
            type: "string",
            semver: {
              loose: loose,
            },
          },
        },
      },
      o = { v: v0 };

    base.properties.v.semver.loose = loose || false;

    o.v = v0;
    base.properties.v.semver.major = true;
    t.ok(ajv.validate({ ...base }, o), "ok: major('" + v0 + "')");
    t.equal(o.v, v[1], "equal: major('" + v0 + "', " + v[1] + ")");
    delete base.properties.v.semver.major;

    o.v = v0;
    console.log("minor", v);
    base.properties.v.semver.minor = true;
    t.ok(ajv.validate({ ...base }, o), "ok: minor('" + v0 + "')");
    t.equal(o.v, v[2], "equal: minor('" + v0 + "', " + v[2] + ")");
    delete base.properties.v.semver.minor;

    o.v = v0;
    base.properties.v.semver.patch = true;
    t.ok(ajv.validate({ ...base }, o), "ok: patch('" + v0 + "')");
    t.equal(o.v, v[3], "equal: patch('" + v0 + "', " + v[3] + ")");
    delete base.properties.v.semver.patch;

    o.v = v0;
    base.properties.v.semver.clean = true;
    t.ok(ajv.validate({ ...base }, o), "ok: clean('" + v0 + "')");
    delete base.properties.v.semver.clean;
  });
  t.end();
});

test("\nequality tests", function (t) {
  // [version1, version2]
  // version1 should be equivalent to version2
  [
    ["1.2.3", "v1.2.3", true],
    ["1.2.3", "=1.2.3", true],
    ["1.2.3", "v 1.2.3", true],
    ["1.2.3", "= 1.2.3", true],
    ["1.2.3", " v1.2.3", true],
    ["1.2.3", " =1.2.3", true],
    ["1.2.3", " v 1.2.3", true],
    ["1.2.3", " = 1.2.3", true],
    ["1.2.3-0", "v1.2.3-0", true],
    ["1.2.3-0", "=1.2.3-0", true],
    ["1.2.3-0", "v 1.2.3-0", true],
    ["1.2.3-0", "= 1.2.3-0", true],
    ["1.2.3-0", " v1.2.3-0", true],
    ["1.2.3-0", " =1.2.3-0", true],
    ["1.2.3-0", " v 1.2.3-0", true],
    ["1.2.3-0", " = 1.2.3-0", true],
    ["1.2.3-1", "v1.2.3-1", true],
    ["1.2.3-1", "=1.2.3-1", true],
    ["1.2.3-1", "v 1.2.3-1", true],
    ["1.2.3-1", "= 1.2.3-1", true],
    ["1.2.3-1", " v1.2.3-1", true],
    ["1.2.3-1", " =1.2.3-1", true],
    ["1.2.3-1", " v 1.2.3-1", true],
    ["1.2.3-1", " = 1.2.3-1", true],
    ["1.2.3-beta", "v1.2.3-beta", true],
    ["1.2.3-beta", "=1.2.3-beta", true],
    ["1.2.3-beta", "v 1.2.3-beta", true],
    ["1.2.3-beta", "= 1.2.3-beta", true],
    ["1.2.3-beta", " v1.2.3-beta", true],
    ["1.2.3-beta", " =1.2.3-beta", true],
    ["1.2.3-beta", " v 1.2.3-beta", true],
    ["1.2.3-beta", " = 1.2.3-beta", true],
    ["1.2.3-beta+build", " = 1.2.3-beta+otherbuild", true],
    ["1.2.3+build", " = 1.2.3+otherbuild", true],
    ["1.2.3-beta+build", "1.2.3-beta+otherbuild"],
    ["1.2.3+build", "1.2.3+otherbuild"],
    ["  v1.2.3+build", "1.2.3+otherbuild"],
  ].forEach(function (v) {
    var v0 = v[0];
    var v1 = v[1];
    var loose = v[2];
    t.ok(
      ajv.validate({ semver: { eq: v1, loose: loose } }, v0),
      `eq('${v0}', '${v1}')`
    );
    t.ok(
      !ajv.validate({ semver: { neq: v1, loose: loose } }, v0),
      `!neq('${v0}', '${v1}')`
    );
    t.ok(
      !ajv.validate({ semver: { gt: v1, loose: loose } }, v0),
      `!gt('${v0}', '${v1}')`
    );
    t.ok(
      ajv.validate({ semver: { gte: v1, loose: loose } }, v0),
      `gte('${v0}', '${v1}')`
    );
    t.ok(
      !ajv.validate({ semver: { lt: v1, loose: loose } }, v0),
      `!lt('${v0}', '${v1}')`
    );
    t.ok(
      ajv.validate({ semver: { lte: v1, loose: loose } }, v0),
      `lte('${v0}', '${v1}')`
    );
  });
  t.end();
});

test("\nrange tests", function (t) {
  // [range, version]
  // version should be included by range
  [
    ["1.0.0 - 2.0.0", "1.2.3"],
    ["^1.2.3+build", "1.2.3"],
    ["^1.2.3+build", "1.3.0"],
    ["1.2.3-pre+asdf - 2.4.3-pre+asdf", "1.2.3"],
    ["1.2.3pre+asdf - 2.4.3-pre+asdf", "1.2.3", true],
    ["1.2.3-pre+asdf - 2.4.3pre+asdf", "1.2.3", true],
    ["1.2.3pre+asdf - 2.4.3pre+asdf", "1.2.3", true],
    ["1.2.3-pre+asdf - 2.4.3-pre+asdf", "1.2.3-pre.2"],
    ["1.2.3-pre+asdf - 2.4.3-pre+asdf", "2.4.3-alpha"],
    ["1.2.3+asdf - 2.4.3+asdf", "1.2.3"],
    ["1.0.0", "1.0.0"],
    [">=*", "0.2.4"],
    ["", "1.0.0"],
    ["*", "1.2.3"],
    ["*", "v1.2.3", true],
    [">=1.0.0", "1.0.0"],
    [">=1.0.0", "1.0.1"],
    [">=1.0.0", "1.1.0"],
    [">1.0.0", "1.0.1"],
    [">1.0.0", "1.1.0"],
    ["<=2.0.0", "2.0.0"],
    ["<=2.0.0", "1.9999.9999"],
    ["<=2.0.0", "0.2.9"],
    ["<2.0.0", "1.9999.9999"],
    ["<2.0.0", "0.2.9"],
    [">= 1.0.0", "1.0.0"],
    [">=  1.0.0", "1.0.1"],
    [">=   1.0.0", "1.1.0"],
    ["> 1.0.0", "1.0.1"],
    [">  1.0.0", "1.1.0"],
    ["<=   2.0.0", "2.0.0"],
    ["<= 2.0.0", "1.9999.9999"],
    ["<=  2.0.0", "0.2.9"],
    ["<    2.0.0", "1.9999.9999"],
    ["<\t2.0.0", "0.2.9"],
    [">=0.1.97", "v0.1.97", true],
    [">=0.1.97", "0.1.97"],
    ["0.1.20 || 1.2.4", "1.2.4"],
    [">=0.2.3 || <0.0.1", "0.0.0"],
    [">=0.2.3 || <0.0.1", "0.2.3"],
    [">=0.2.3 || <0.0.1", "0.2.4"],
    ["||", "1.3.4"],
    ["2.x.x", "2.1.3"],
    ["1.2.x", "1.2.3"],
    ["1.2.x || 2.x", "2.1.3"],
    ["1.2.x || 2.x", "1.2.3"],
    ["x", "1.2.3"],
    ["2.*.*", "2.1.3"],
    ["1.2.*", "1.2.3"],
    ["1.2.* || 2.*", "2.1.3"],
    ["1.2.* || 2.*", "1.2.3"],
    ["*", "1.2.3"],
    ["2", "2.1.2"],
    ["2.3", "2.3.1"],
    ["~2.4", "2.4.0"], // >=2.4.0 <2.5.0
    ["~2.4", "2.4.5"],
    ["~>3.2.1", "3.2.2"], // >=3.2.1 <3.3.0,
    ["~1", "1.2.3"], // >=1.0.0 <2.0.0
    ["~>1", "1.2.3"],
    ["~> 1", "1.2.3"],
    ["~1.0", "1.0.2"], // >=1.0.0 <1.1.0,
    ["~ 1.0", "1.0.2"],
    ["~ 1.0.3", "1.0.12"],
    [">=1", "1.0.0"],
    [">= 1", "1.0.0"],
    ["<1.2", "1.1.1"],
    ["< 1.2", "1.1.1"],
    ["~v0.5.4-pre", "0.5.5"],
    ["~v0.5.4-pre", "0.5.4"],
    ["=0.7.x", "0.7.2"],
    ["<=0.7.x", "0.7.2"],
    [">=0.7.x", "0.7.2"],
    ["<=0.7.x", "0.6.2"],
    ["~1.2.1 >=1.2.3", "1.2.3"],
    ["~1.2.1 =1.2.3", "1.2.3"],
    ["~1.2.1 1.2.3", "1.2.3"],
    ["~1.2.1 >=1.2.3 1.2.3", "1.2.3"],
    ["~1.2.1 1.2.3 >=1.2.3", "1.2.3"],
    ["~1.2.1 1.2.3", "1.2.3"],
    [">=1.2.1 1.2.3", "1.2.3"],
    ["1.2.3 >=1.2.1", "1.2.3"],
    [">=1.2.3 >=1.2.1", "1.2.3"],
    [">=1.2.1 >=1.2.3", "1.2.3"],
    [">=1.2", "1.2.8"],
    ["^1.2.3", "1.8.1"],
    ["^0.1.2", "0.1.2"],
    ["^0.1", "0.1.2"],
    ["^1.2", "1.4.2"],
    ["^1.2 ^1", "1.4.2"],
    ["^1.2.3-alpha", "1.2.3-pre"],
    ["^1.2.0-alpha", "1.2.0-pre"],
    ["^0.0.1-alpha", "0.0.1-beta"],
  ].forEach(function (v) {
    var range = v[0];
    var ver = v[1];
    var loose = v[2];
    t.ok(
      ajv.validate({ semver: { satisfies: range, loose: loose } }, ver),
      range + " satisfied by " + ver
    );
  });
  t.end();
});

test("\nnegative range tests", function (t) {
  // [range, version]
  // version should not be included by range
  [
    ["1.0.0 - 2.0.0", "2.2.3"],
    ["1.2.3+asdf - 2.4.3+asdf", "1.2.3-pre.2"],
    ["1.2.3+asdf - 2.4.3+asdf", "2.4.3-alpha"],
    ["^1.2.3+build", "2.0.0"],
    ["^1.2.3+build", "1.2.0"],
    ["^1.2.3", "1.2.3-pre"],
    ["^1.2", "1.2.0-pre"],
    [">1.2", "1.3.0-beta"],
    ["<=1.2.3", "1.2.3-beta"],
    ["^1.2.3", "1.2.3-beta"],
    ["=0.7.x", "0.7.0-asdf"],
    [">=0.7.x", "0.7.0-asdf"],
    ["1", "1.0.0beta", true],
    ["<1", "1.0.0beta", true],
    ["< 1", "1.0.0beta", true],
    ["1.0.0", "1.0.1"],
    [">=1.0.0", "0.0.0"],
    [">=1.0.0", "0.0.1"],
    [">=1.0.0", "0.1.0"],
    [">1.0.0", "0.0.1"],
    [">1.0.0", "0.1.0"],
    ["<=2.0.0", "3.0.0"],
    ["<=2.0.0", "2.9999.9999"],
    ["<=2.0.0", "2.2.9"],
    ["<2.0.0", "2.9999.9999"],
    ["<2.0.0", "2.2.9"],
    [">=0.1.97", "v0.1.93", true],
    [">=0.1.97", "0.1.93"],
    ["0.1.20 || 1.2.4", "1.2.3"],
    [">=0.2.3 || <0.0.1", "0.0.3"],
    [">=0.2.3 || <0.0.1", "0.2.2"],
    ["2.x.x", "1.1.3"],
    ["2.x.x", "3.1.3"],
    ["1.2.x", "1.3.3"],
    ["1.2.x || 2.x", "3.1.3"],
    ["1.2.x || 2.x", "1.1.3"],
    ["2.*.*", "1.1.3"],
    ["2.*.*", "3.1.3"],
    ["1.2.*", "1.3.3"],
    ["1.2.* || 2.*", "3.1.3"],
    ["1.2.* || 2.*", "1.1.3"],
    ["2", "1.1.2"],
    ["2.3", "2.4.1"],
    ["~2.4", "2.5.0"], // >=2.4.0 <2.5.0
    ["~2.4", "2.3.9"],
    ["~>3.2.1", "3.3.2"], // >=3.2.1 <3.3.0
    ["~>3.2.1", "3.2.0"], // >=3.2.1 <3.3.0
    ["~1", "0.2.3"], // >=1.0.0 <2.0.0
    ["~>1", "2.2.3"],
    ["~1.0", "1.1.0"], // >=1.0.0 <1.1.0
    ["<1", "1.0.0"],
    [">=1.2", "1.1.1"],
    ["1", "2.0.0beta", true],
    ["~v0.5.4-beta", "0.5.4-alpha"],
    ["=0.7.x", "0.8.2"],
    [">=0.7.x", "0.6.2"],
    ["<0.7.x", "0.7.2"],
    ["<1.2.3", "1.2.3-beta"],
    ["=1.2.3", "1.2.3-beta"],
    [">1.2", "1.2.8"],
    ["^1.2.3", "2.0.0-alpha"],
    ["^1.2.3", "1.2.2"],
    ["^1.2", "1.1.9"],
    ["*", "v1.2.3-foo", true],
    // invalid ranges never satisfied!
    ["blerg", "1.2.3"],
    ["git+https://user:password0123@github.com/foo", "123.0.0", true],
    ["^1.2.3", "2.0.0-pre"],
  ].forEach(function (v) {
    var range = v[0];
    var ver = v[1];
    var loose = v[2];
    t.ok(
      !ajv.validate({ semver: { satisfies: range, loose: loose } }, ver),
      range + " not satisfied by " + ver
    );
  });
  t.end();
});

test("\nvalid range test", function (t) {
  // [range, result]
  // validRange(range) -> result
  // translate ranges into their canonical form
  [
    ["1.0.0 - 2.0.0", ">=1.0.0 <=2.0.0"],
    ["1.0.0", "1.0.0"],
    [">=*", "*"],
    ["", "*"],
    ["*", "*"],
    ["*", "*"],
    [">=1.0.0", ">=1.0.0"],
    [">1.0.0", ">1.0.0"],
    ["<=2.0.0", "<=2.0.0"],
    ["1", ">=1.0.0 <2.0.0"],
    ["<=2.0.0", "<=2.0.0"],
    ["<=2.0.0", "<=2.0.0"],
    ["<2.0.0", "<2.0.0"],
    ["<2.0.0", "<2.0.0"],
    [">= 1.0.0", ">=1.0.0"],
    [">=  1.0.0", ">=1.0.0"],
    [">=   1.0.0", ">=1.0.0"],
    ["> 1.0.0", ">1.0.0"],
    [">  1.0.0", ">1.0.0"],
    ["<=   2.0.0", "<=2.0.0"],
    ["<= 2.0.0", "<=2.0.0"],
    ["<=  2.0.0", "<=2.0.0"],
    ["<    2.0.0", "<2.0.0"],
    ["<	2.0.0", "<2.0.0"],
    [">=0.1.97", ">=0.1.97"],
    [">=0.1.97", ">=0.1.97"],
    ["0.1.20 || 1.2.4", "0.1.20||1.2.4"],
    [">=0.2.3 || <0.0.1", ">=0.2.3||<0.0.1"],
    [">=0.2.3 || <0.0.1", ">=0.2.3||<0.0.1"],
    [">=0.2.3 || <0.0.1", ">=0.2.3||<0.0.1"],
    ["||", "||"],
    ["2.x.x", ">=2.0.0 <3.0.0"],
    ["1.2.x", ">=1.2.0 <1.3.0"],
    ["1.2.x || 2.x", ">=1.2.0 <1.3.0||>=2.0.0 <3.0.0"],
    ["1.2.x || 2.x", ">=1.2.0 <1.3.0||>=2.0.0 <3.0.0"],
    ["x", "*"],
    ["2.*.*", ">=2.0.0 <3.0.0"],
    ["1.2.*", ">=1.2.0 <1.3.0"],
    ["1.2.* || 2.*", ">=1.2.0 <1.3.0||>=2.0.0 <3.0.0"],
    ["*", "*"],
    ["2", ">=2.0.0 <3.0.0"],
    ["2.3", ">=2.3.0 <2.4.0"],
    ["~2.4", ">=2.4.0 <2.5.0"],
    ["~2.4", ">=2.4.0 <2.5.0"],
    ["~>3.2.1", ">=3.2.1 <3.3.0"],
    ["~1", ">=1.0.0 <2.0.0"],
    ["~>1", ">=1.0.0 <2.0.0"],
    ["~> 1", ">=1.0.0 <2.0.0"],
    ["~1.0", ">=1.0.0 <1.1.0"],
    ["~ 1.0", ">=1.0.0 <1.1.0"],
    ["^0", ">=0.0.0 <1.0.0"],
    ["^ 1", ">=1.0.0 <2.0.0"],
    ["^0.1", ">=0.1.0 <0.2.0"],
    ["^1.0", ">=1.0.0 <2.0.0"],
    ["^1.2", ">=1.2.0 <2.0.0"],
    ["^0.0.1", ">=0.0.1 <0.0.2"],
    ["^0.0.1-beta", ">=0.0.1-beta <0.0.2"],
    ["^0.1.2", ">=0.1.2 <0.2.0"],
    ["^1.2.3", ">=1.2.3 <2.0.0"],
    ["^1.2.3-beta.4", ">=1.2.3-beta.4 <2.0.0"],
    ["<1", "<1.0.0"],
    ["< 1", "<1.0.0"],
    [">=1", ">=1.0.0"],
    [">= 1", ">=1.0.0"],
    ["<1.2", "<1.2.0"],
    ["< 1.2", "<1.2.0"],
    ["1", ">=1.0.0 <2.0.0"],
    [">01.02.03", ">1.2.3", true],
    [">01.02.03", null],
    ["~1.2.3beta", ">=1.2.3-beta <1.3.0", true],
    ["~1.2.3beta", null],
    ["^ 1.2 ^ 1", ">=1.2.0 <2.0.0 >=1.0.0 <2.0.0"],
  ].forEach(function (v) {
    var pre = v[0];
    var wanted = v[1];
    var loose = v[2];
    t.equal(
      ajv.validate({ semver: { validRange: true, loose: loose } }, pre),
      wanted !== null,
      "validRange(" + pre + ") === " + wanted
    );
  });

  t.end();
});
